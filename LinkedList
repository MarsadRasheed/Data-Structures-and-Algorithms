#include <iostream>
using namespace std;

// Creating a node class

class node {
public:
	int data;
	node* next;
};

// Creating LinkedList Class

class LinkedList {
private:
	node* head;
	node* tail;
public:
	LinkedList() {
		head = NULL;
		tail = NULL;
	}

	void insertionAtTail(int n);
	void insertionAtHead(int n);
	void deletion(int n);
	bool search(int n);
	void print();
	void sort();
	void deleteAtHead();
	void deleteAtTail();
	void deleteNode(int num);
};

// function defination for deleting node using value

void LinkedList::deleteNode(int num) {
	
	node* current;
	current = head;

	node* previous;
	previous = head;

	while (current != NULL){
		if (current->data == num) {
			previous->next = current->next;
		}
		previous = current;
		current = current->next;
	}
}

// function defination for searching number in LinkedList 

bool LinkedList :: search(int n) {

	node* ptr;
	ptr = head;
	if (ptr == NULL) {
		cout << "\nyour list is empty.\n";
	}
	else {
		while (ptr != NULL) {
			if (ptr->data == n) {
				cout << "\nGiven number is in the list ."<<endl;
				return true;
			}
			ptr = ptr->next;
		}
		cout << "\nGiven number is not found in the list ."<<endl;
		return false;
	}
}


// Function defination for printing LinkedList

void LinkedList::print() {
	node* ptr;
	ptr = head;
	if (ptr == NULL) {
		cout << "\nYour list is empty.\n";
	}
	else {
		while (ptr != NULL) {
			cout << ptr->data << "  ";
			ptr = ptr->next;
		}
	}
}

// Func defination for Insertioin at Tail in LinkedList

void LinkedList :: insertionAtTail(int n) {

	node* tptr;
	tptr = head;

	node* temp = new node;
	temp->data = n;
	temp->next = NULL;

	if (head == NULL) {
		head = temp;
		tail = temp;
	}
	else {
			tail->next = temp;
			tail = temp;
	}
}  

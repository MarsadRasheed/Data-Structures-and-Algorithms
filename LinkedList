#include <iostream>
using namespace std;

// Creating a node class

class node {
public:
	int data;
	node* next;
};

// Creating LinkedList Class

class LinkedList {
private:
	node* head;
	node* tail;
public:
	LinkedList() {
		head = NULL;
		tail = NULL;
	}

	void insertionAtTail(int n);
	void insertionAtHead(int n);
	void deletion(int n);
	bool search(int n);
	void print();
	void sort();
	void deleteAtHead();
	void deleteAtTail();
	void deleteNode(int num);
	void deleteIndex(int pos);
	void insertionAt(int position, int num);
};

// function defination for deleting node using value

void LinkedList::deleteNode(int num) {
	
	node* current;
	current = head;

	node* previous;
	previous = head;

	while (current != NULL){
		if (current->data == num) {
			previous->next = current->next;
		}
		previous = current;
		current = current->next;
	}
}

// function defination for searching number in LinkedList 

bool LinkedList :: search(int n) {

	node* ptr;
	ptr = head;
	if (ptr == NULL) {
		cout << "\nyour list is empty.\n";
	}
	else {
		while (ptr != NULL) {
			if (ptr->data == n) {
				cout << "\nGiven number is in the list ."<<endl;
				return true;
			}
			ptr = ptr->next;
		}
		cout << "\nGiven number is not found in the list ."<<endl;
		return false;
	}
}


// Function defination for printing LinkedList

void LinkedList::print() {
	node* ptr;
	ptr = head;
	if (ptr == NULL) {
		cout << "\nYour list is empty.\n";
	}
	else {
		while (ptr != NULL) {
			cout << ptr->data << "  ";
			ptr = ptr->next;
		}
	}
}

// Func defination for Insertioin at Tail in LinkedList

void LinkedList :: insertionAtTail(int n) {

	node* tptr;
	tptr = head;

	node* temp = new node;
	temp->data = n;
	temp->next = NULL;

	if (head == NULL) {
		head = temp;
		tail = temp;
	}
	else {
			tail->next = temp;
			tail = temp;
	}
}  


// Func defination for Insertion at Head of LinkedList

void LinkedList::insertionAtHead(int n) {
	node* tptr ;
	tptr = head;

	node* temp = new node;
	temp->data = n;
	temp->next = NULL;

	if (head == NULL) {
		head = temp;
		tail = temp;
	}
	else {
		temp->next = head;
		head = temp;
	}
}

// Func defintaion for delete element from the beginning of the LinkedList 

void LinkedList::deleteAtHead(){
	node* nod;
	nod = head;
	head = head->next;
	delete nod;
}

// Func defination for delete element from the end of the LinkedList

void LinkedList::deleteAtTail() {

	node* current;
	node* previous;

	current = head;
	previous = tail;

	while (current->next != NULL) {
		previous = current;
		current = current->next;
	}
	tail = previous;
	previous->next = NULL;
	delete current;
}

// func defination for sorting in ascending order

void LinkedList::sort() {
	
	node* previous = head;
	node* current = head;

	current = current->next;

	while ( current != NULL)
	{
		previous = head;
		while (previous != NULL) {
			if (previous->data > current->data) {
				int temp = current->data;
				current->data = previous->data;
				previous->data = temp;
			}
			else {
				previous = previous->next;
			}
		}
		current = current->next;
	}
}

// function for delete any node from position

void LinkedList::deleteIndex(int position) {
	node* previous;
	previous = head;

	node* current;
	current = head;

	for (int i = 0; i < position - 1; i++) {
		previous = current;
		current = current->next;
	}

	previous->next = current->next;
	delete current;
}

void LinkedList::insertionAt(int position, int num) {
	node* previous;
	previous = head;
	node* current;
	current = head;

	node* temp = new node;
	temp->data = num;
	temp->next = NULL;

	for (int i = 1; i < position - 2; i++) {
		previous = previous->next;
	}
	current = previous->next;
	previous->next = temp;
	temp->next = current;
}


int main() {

	LinkedList L;
	int choice,element,insertChoice,index;
	int searchIndex;
	
	do {
		cout << "\n1.  Add." << endl;
		cout << "2.  Remove. " << endl;
		cout << "3.  Search. " << endl;
		cout << "4.  Print. " << endl;
		cout << "5.  Sort. " << endl;
		cout << "6.  Exit ." << endl;

		cout << "\nEnter your choice : ";
		cin >> choice;

		// Switch statement for various conditions

		switch (choice)
		{
		case(1):
			cout << " 1. Insertion at head. " << endl;
			cout << " 2. Insertion at tail. " << endl;
			cin >> insertChoice;
			if (insertChoice == 1) {
				cout << "Enter element to insert in list : ";
				cin >> element;
				L.insertionAtHead(element);
				break;
			}
			else if (insertChoice == 2) {
				cout << "Enter element to insert in list : ";
				cin >> element;
				L.insertionAtTail(element);
				break;
			}
		case(2):
			cout << "\n";
			L.print();
			cout << "Enter index to remove from list : ";
			cin >> index;
			L.deletion(index);
			break;
		case(3):
			cout << "Enter element to search in list : ";
			cin >> searchIndex;
			L.search(searchIndex);
			break;
		case(4):
			cout << "\nShowing results . \n" << endl;
			L.print();
			cout << "\n";
			break;
		case(5):
			cout << "\nShowig resuts for sorted list . \n" << endl;
			L.sort();
			L.print();
			cout << "\n";
			break;
		case(6):
			break;
		default:
			cout << "INVALID INPUT TYPE!!";
			break;
		}
	} while (choice != 6);
	
	system("pause");
	return 0;
}
